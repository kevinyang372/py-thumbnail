{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Pythumbnail is a Python 3 library created for quick access to the content of python files. As a developer, you may have encountered many badly written codes with messy indentations, long nested for loops and missing comments. It is a painful experience to read through these codes trying to understand what is going on in there. Pythumbnail is made for those hard situations. Using less than three lines of code, you will be able to see the overall tree structure of the code, get quick access to the parameters required in each function, and understand how different function groups (for loop, class, if statement...) are related to each other. It also provides more advanced search and summary functions that allow you to dig deeper into specific part of the code or get a summary of function group countings. The library utilizes finite state machine (FSM) for language parsings with the time complexity of O(N), which helps it to remain a fast scanning speed even for long python files. Note Pythumbnail is officially beta software. There will be occasional changes that break backward compatibility. Reporting of bugs and update suggestions are very welcomed!","title":"Introduction"},{"location":"#introduction","text":"Pythumbnail is a Python 3 library created for quick access to the content of python files. As a developer, you may have encountered many badly written codes with messy indentations, long nested for loops and missing comments. It is a painful experience to read through these codes trying to understand what is going on in there. Pythumbnail is made for those hard situations. Using less than three lines of code, you will be able to see the overall tree structure of the code, get quick access to the parameters required in each function, and understand how different function groups (for loop, class, if statement...) are related to each other. It also provides more advanced search and summary functions that allow you to dig deeper into specific part of the code or get a summary of function group countings. The library utilizes finite state machine (FSM) for language parsings with the time complexity of O(N), which helps it to remain a fast scanning speed even for long python files. Note Pythumbnail is officially beta software. There will be occasional changes that break backward compatibility. Reporting of bugs and update suggestions are very welcomed!","title":"Introduction"},{"location":"documentation/","text":"Documentation Read File To start scanning, you need to input the directory of python file. import pythumbnail # reads in a new python file file = pythumbnail.read_file('some_file.py') # turns on logging mode (will output all state changes) file = pythumbnail.read_file('some_file.py', silent = False) # customizes the keywords to capture (default: 'class', 'def', 'for', 'if', 'elif','else:', 'while') file = pythumbnail.read_file('some_file.py', keys = ['for']) Print Tree Once the directory is successfully passed to Pythumbnail. You are able to print out tree structure of the Python file using file.tree # reads in a new python file file = pythumbnail.read_file('some_file.py') # print tree print(file.tree) Search You could also search for a specific function with object.search('name') # reads in a new python file file = pythumbnail.read_file('some_file.py') # search for a specific fucntion some_function = file.search('some_name') # print tree print(some_function) Show Summary Pythumbnail provides a dictionary containing the count of each function group # reads in a new python file file = pythumbnail.read_file('some_file.py') # show summary of the file summary = file.show_summary() # print summary print(summary) Show Text File Print the file # reads in a new python file file = pythumbnail.read_file('some_file.py') # get the file file_text = file.show_text() # print file print(file_text)","title":"Documentation"},{"location":"documentation/#documentation","text":"","title":"Documentation"},{"location":"documentation/#read-file","text":"To start scanning, you need to input the directory of python file. import pythumbnail # reads in a new python file file = pythumbnail.read_file('some_file.py') # turns on logging mode (will output all state changes) file = pythumbnail.read_file('some_file.py', silent = False) # customizes the keywords to capture (default: 'class', 'def', 'for', 'if', 'elif','else:', 'while') file = pythumbnail.read_file('some_file.py', keys = ['for'])","title":"Read File"},{"location":"documentation/#print-tree","text":"Once the directory is successfully passed to Pythumbnail. You are able to print out tree structure of the Python file using file.tree # reads in a new python file file = pythumbnail.read_file('some_file.py') # print tree print(file.tree)","title":"Print Tree"},{"location":"documentation/#search","text":"You could also search for a specific function with object.search('name') # reads in a new python file file = pythumbnail.read_file('some_file.py') # search for a specific fucntion some_function = file.search('some_name') # print tree print(some_function)","title":"Search"},{"location":"documentation/#show-summary","text":"Pythumbnail provides a dictionary containing the count of each function group # reads in a new python file file = pythumbnail.read_file('some_file.py') # show summary of the file summary = file.show_summary() # print summary print(summary)","title":"Show Summary"},{"location":"documentation/#show-text-file","text":"Print the file # reads in a new python file file = pythumbnail.read_file('some_file.py') # get the file file_text = file.show_text() # print file print(file_text)","title":"Show Text File"},{"location":"getting_started/","text":"Getting Started Installing Pythumbnail Pythumbnail requires Python 3 to run. Once you've installed Python 3, you can install Pythumbnail using pip: $ pip install pythumbnail Depending on environment setup, you might need to use the following: $ python3 -m pip install pythumbnail Or you can clone from github and manually install: $ git clone https://github.com/kevinyang372/py-thumbnail.git $ cd py-thumbnail $ python setup.py install Simple Example Suppose you have the following python file: class someclass: def __init__(self): self.a = 10 def do_something(self): for i in range(len(self.a)): if i == 2: print(i) def do_something_else(self, num): while self.a < 100: self.a += num Here is a small example to show what Pythumbnail could do (Python 3): import pythumbnail file = pythumbnail.read_file('some_file.py') file.scan() print(file.tree) The output will look like: 'File some_file.py()' 'class someclass()' 'def __init__(self)' 'def do_something(self)' 'for i in range(len(self.a))' 'if[i,2] LOGIC: [==]' 'def do_something_else(self,num)' 'while[self.a,100] LOGIC: [<]'","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"getting_started/#installing-pythumbnail","text":"Pythumbnail requires Python 3 to run. Once you've installed Python 3, you can install Pythumbnail using pip: $ pip install pythumbnail Depending on environment setup, you might need to use the following: $ python3 -m pip install pythumbnail Or you can clone from github and manually install: $ git clone https://github.com/kevinyang372/py-thumbnail.git $ cd py-thumbnail $ python setup.py install","title":"Installing Pythumbnail"},{"location":"getting_started/#simple-example","text":"Suppose you have the following python file: class someclass: def __init__(self): self.a = 10 def do_something(self): for i in range(len(self.a)): if i == 2: print(i) def do_something_else(self, num): while self.a < 100: self.a += num Here is a small example to show what Pythumbnail could do (Python 3): import pythumbnail file = pythumbnail.read_file('some_file.py') file.scan() print(file.tree) The output will look like: 'File some_file.py()' 'class someclass()' 'def __init__(self)' 'def do_something(self)' 'for i in range(len(self.a))' 'if[i,2] LOGIC: [==]' 'def do_something_else(self,num)' 'while[self.a,100] LOGIC: [<]'","title":"Simple Example"},{"location":"how_it_works/","text":"How it Works: Pythumbnail parses python files on two levels. On the higher level, it detects the key identifiers at the beginning of the line (e.g. def, for, if...). It also keeps track of the number of indentations to construct the inheritance relationship between different lines. When the key identifier is found, it passes the string of that line to the lower level parser, which utilizes finite state machine to further divide it into function group names, logical operators and parameters. Finite State Machine A finite state machine (sometimes called a finite state automaton) is a computation model that can be implemented with hardware or software and can be used to simulate sequential logic and some computer programs. Finite state automata generate regular languages. Finite state machines can be used to model problems in many fields including mathematics, artificial intelligence, games, and linguistics. Pythumbnail generates finite state machine maps for three different types of function group: function, for loop and while/if statement. FSM for Functions FSM States: S_NAME : defining name of the function S_PARA : defining parameters of the function S_COMMA : adding new parameters S_END_RULE : end of sentences FSM for For Loops FSM States: S_NAME : defining name of the function S_PARA : defining parameters of the function S_COMMA : adding new parameters S_LOGIC : defining logical relationships S_STRING : inputing information into a string (spaces do not cause state changes) S_END_RULE : end of sentences FSM for While/If Statements FSM States: S_NAME : defining name of the function S_PARA : defining parameters of the function S_COMMA : adding new parameters S_LOGIC : defining logical relationships S_STRING : inputing information into a string (spaces do not cause state changes) S_END_RULE : end of sentences","title":"How it Works:"},{"location":"how_it_works/#how-it-works","text":"Pythumbnail parses python files on two levels. On the higher level, it detects the key identifiers at the beginning of the line (e.g. def, for, if...). It also keeps track of the number of indentations to construct the inheritance relationship between different lines. When the key identifier is found, it passes the string of that line to the lower level parser, which utilizes finite state machine to further divide it into function group names, logical operators and parameters. Finite State Machine A finite state machine (sometimes called a finite state automaton) is a computation model that can be implemented with hardware or software and can be used to simulate sequential logic and some computer programs. Finite state automata generate regular languages. Finite state machines can be used to model problems in many fields including mathematics, artificial intelligence, games, and linguistics. Pythumbnail generates finite state machine maps for three different types of function group: function, for loop and while/if statement.","title":"How it Works:"},{"location":"how_it_works/#fsm-for-functions","text":"FSM States: S_NAME : defining name of the function S_PARA : defining parameters of the function S_COMMA : adding new parameters S_END_RULE : end of sentences","title":"FSM for Functions"},{"location":"how_it_works/#fsm-for-for-loops","text":"FSM States: S_NAME : defining name of the function S_PARA : defining parameters of the function S_COMMA : adding new parameters S_LOGIC : defining logical relationships S_STRING : inputing information into a string (spaces do not cause state changes) S_END_RULE : end of sentences","title":"FSM for For Loops"},{"location":"how_it_works/#fsm-for-whileif-statements","text":"FSM States: S_NAME : defining name of the function S_PARA : defining parameters of the function S_COMMA : adding new parameters S_LOGIC : defining logical relationships S_STRING : inputing information into a string (spaces do not cause state changes) S_END_RULE : end of sentences","title":"FSM for While/If Statements"}]}